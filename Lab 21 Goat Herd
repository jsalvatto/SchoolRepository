// COMSC-210 | Lab 21 | Joseph Salvatto
// Codelite IDE

#include <iostream>
#include <string>
#include <iomanip>
#include <vector>
#include <algorithm>
#include <numeric>
#include <limits>
#include <fstream>
#include <cstdlib>
#include <ctime>
using namespace std;

    const int MIN_AGE = 1, MAX_AGE = 20;
    const int MIN_LS = 5, MAX_LS = 20;
    const int NUM_NAMES = 15, NUM_COLORS = 15;
    
    void display()//function for seperation
    {
        int count;
            for (count = 0; count < 30; count++)
            {
                cout<<"_";
            } 
            {
                cout<<endl;
            }
    
    }
    
    class Goat {
        private:
            int age;
            string name;
            string color;
            static string names[NUM_NAMES];
            static string colors[NUM_COLORS];
        public:
            Goat(){//assinging random values
                age = rand() % (MAX_AGE - MIN_AGE + 1) + MIN_AGE;
                name = names[rand() % NUM_NAMES];
                color = colors[rand() % NUM_COLORS];
            }
            
            Goat(int a, string n, string c) : age(a), name(n), color(c){}
            //getters and setters
            int getAge() const {return age;}
            string getName() const {return name;}
            string getColor() const {return color;}
            
            void print() const{
                cout<<name<<" - "<<color<<" - "<<age;
            }
    };
        //initializing static arrays
        string Goat :: names[NUM_NAMES] = {"Mike", "Bob", "Tom", "Tyrone", "DeSquarius", "Tevariousness", "Charlemagne", "Lee", "Mingtao", "Tojo", "Suni", "Korra", "Tailee", "Ram", "Sabrina"};
        string Goat::colors[NUM_COLORS] = {"Red", "Blue", "Green", "Yellow", "Orange", "Purple", "White", "Black", "Brown", "Gold", "Silver", "Bronze", "Cyan", "Grey", "Gray"};
        
        class DoublyLinkedList{
            private:
                struct Node{
                    Goat data;
                    Node* prev;
                    Node* next;
                    Node(Goat val, Node* p = nullptr, Node* n = nullptr) : data(val), prev(p), next(n){}
                };
                Node* head;
                Node* tail;
            public:
                DoublyLinkedList() : head(nullptr), tail(nullptr){}
                //push to back
                void push_back(const Goat& value){
                    Node* newNode = new Node(value);
                    if (!tail){
                        head = tail = newNode;
                    }else{
                        tail->next = newNode;
                        newNode->prev = tail;
                        tail = newNode;
                    }
                }//push to front
                void push_front(const Goat& value){
                    Node* newNode = new Node(value);
                    if(!head){
                        head = tail = newNode;
                    }else{
                        newNode->next = head;
                        head->prev = newNode;
                        head = newNode;
                    }
                }//prints list normal way
                void print() const{
                    if(!head){
                        cout<<"List is empty."<<endl;
                        return;
                    }
                    Node* current = head;
                    while (current){
                        current->data.print();
                        cout<<endl;
                        current = current->next;
                    }
                }//prints list in reverse order
                void print_reverse()const{
                    if(!tail){
                        cout<<"List is empty."<<endl;
                        return;
                    }
                    Node* current = tail;
                    while(current){
                        current->data.print();
                        cout<<endl;
                        current = current->prev;
                    }
                }
                ~DoublyLinkedList(){
                    while(head){
                        Node* temp = head;
                        head = head->next;
                        delete temp;
                    }
                }
        };
        
        int main(){//main program
            srand(time(0));
            
            DoublyLinkedList list;
            int size = rand() % (MAX_LS - MIN_LS + 1) + MIN_LS;
            for (int i = 0; i < size; ++i){
                Goat randomGoat;
                list.push_back(randomGoat);
            }
            display();
            cout<<"Normal list: "<<endl;
            list.print();
            
            display();
            cout<<"Backwards list: "<<endl;
            list.print_reverse();
        
    
    return 0;
}


