// COMSC-210 | Midterm #1 | Joseph Salvatto
// Codelite IDE

#include <iostream>
using namespace std;

const int MIN_NR = 10, MAX_NR = 99, MIN_LS = 5, MAX_LS = 20;

class DoublyLinkedList {//define the class as DoublyLinkedList to manage integers
private:
    struct Node {//struct named node to represent a node in the doubly linked list
        int data;//store integer in data
        Node* prev;//points to previous node
        Node* next;//points to next node
        Node(int val, Node* p = nullptr, Node* n = nullptr) {//constructor initializes data
            data = val;
            prev = p;
            next = n;
        }
    };
    Node* head;//points to first or head node in a list
    Node* tail;//points to last of tail node in a list

public:
    DoublyLinkedList() {//initializes list to nothing or empty
        head = nullptr;//since list is empty, head and tail are null
        tail = nullptr;
    }

    void insert_after(int value, int position) {//function to insert new nodes at a given position
        if (position < 0) {//
            cout << "Position must be >= 0." << endl;//makes it so that a position cannot be negative
            return;
        }
        Node* newNode = new Node(value);//creates new node initialized to value
        if (!head) {
            head = tail = newNode;//head and tail will be set to newnode
            return;
        }
        Node* temp = head;//head will be first traversing position
        for (int i = 0; i < position && temp; ++i)
            temp = temp->next;//move temp to the next node
        if (!temp) {
            cout << "Position exceeds list size. Node not inserted.\n";
            delete newNode;//deleting to free up memory
            return;
        }
        newNode->next = temp->next;//insert a new node after temp
        newNode->prev = temp;
        if (temp->next)
            temp->next->prev = newNode;//sets next nodes prev to newNode
        else
            tail = newNode;//updating tail to point to newNode
        temp->next = newNode;
    }

    void delete_val(int value) {//function to delete nodes at a given position
        if (!head) return;//if nothing is in head there is nothing to delete
        Node* temp = head;//start traversing from head node
        while (temp && temp->data != value)//traverse until you get to matching value
            temp = temp->next;
        if (!temp) return;//if no node with the value is found return
        if (temp->prev)
            temp->prev->next = temp->next;//update previous nodes next pointer if temp is not head
        else
            head = temp->next;
        if (temp->next)
            temp->next->prev = temp->prev;//update previous nodes next pointer if temp is not tail
        else
            tail = temp->prev;
        delete temp;//delete to free up memory
    }

    void delete_pos(int pos) {//function to delete nodes at specified positions
        if (!head) {
            cout << "List is empty." << endl;
            return;
        }
        if (pos == 1) {//if position is at 1 delete
            pop_front();
            return;
        }
        Node* temp = head;//start traversing from head node
        for (int i = 1; i < pos; i++) {//traverse to specified position
            if (!temp) {
                cout << "Position doesn't exist." << endl;
                return;
            }
            temp = temp->next;
        }
        if (!temp) {//show error if cant get to position
            cout << "Position doesn't exist." << endl;
            return;
        }
        if (!temp->next) {
            pop_back();//using pop back
            return;
        }
        Node* tempPrev = temp->prev;
        tempPrev->next = temp->next;
        temp->next->prev = tempPrev;
        delete temp;//delete to free up memory
    }

    void push_back(int v) {//function to add a new node to end of list
        Node* newNode = new Node(v);//create the new node
        if (!tail)
            head = tail = newNode;
        else {
            tail->next = newNode;//update tails next to new node
            newNode->prev = tail;//set new nodes previous to tail
            tail = newNode;//update tail to new node
        }
    }

    void push_front(int v) {//function to add a new node to the front of list
        Node* newNode = new Node(v);
        if (!head)
            head = tail = newNode;
        else {
            newNode->next = head;//update newnodes next to head
            head->prev = newNode;//update head prev to new node
            head = newNode;//update head to new node
        }
    }

    void pop_front() {//function to remove first node on a list
        if (!head) {
            cout << "List is empty." << endl;
            return;
        }
        Node* temp = head;//choose head to be removed
        if (head->next) {//update head to next
            head = head->next;
            head->prev = nullptr;//update heads prev to null
        } else {
            head = tail = nullptr;
        }
        delete temp;//remove temp and free up memory
    }

    void pop_back() {//function to remove last node on list
        if (!tail) {
            cout << "List is empty." << endl;
            return;
        }
        Node* temp = tail;//choose node for deletion
        if (tail->prev) {//update tail to prev
            tail = tail->prev;
            tail->next = nullptr;//update tails next to null
        } else {
            head = tail = nullptr;
        }
        delete temp;//remove temp and free up memory
    }

    ~DoublyLinkedList() {//deconstructor
        while (head) {
            Node* temp = head;//choose current head
            head = head->next;//move head to next
            delete temp;//delete prev head node
        }
    }

    void print() {//function to print all values
        Node* current = head;//start traversing from head node
        if (!current) {
            cout << "List is empty." << endl;
            return;
        }
        while (current) {
            cout << current->data << " ";//print data of current node
            current = current->next;//move on to next node
        }
        cout << endl;
    }

    void print_reverse() {//function to print all values in reverse
        Node* current = tail;//start traversing from tail node
        if (!current) {
            cout << "List is empty." << endl;
            return;
        }
        while (current) {
            cout << current->data << " ";//print data of current node
            current = current->prev;//move to previous node
        }
        cout << endl;
    }

    void every_other_element(){
        Node* current = head;
        while (current){
            cout<<current->data<<" ";
            if(current->next){
                current=current->next->next;
            }else{
                break;
            }
        }
        cout<<endl;
    }
};

int main() {

    DoublyLinkedList list;
    

    return 0;
}



